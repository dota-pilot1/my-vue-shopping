================================================================
Vue Shopping 프로젝트 챌린지 과제 30가지
================================================================

현재 기초적인 UI에서 벗어나 실력을 높이기 위한 도전 과제들


1. UI/UX 고도화 챌린지 (10개)
================================================================

□ 01. 다크모드 구현
   - 토글 버튼으로 light/dark 전환
   - localStorage에 설정 저장
   - 시스템 설정 감지 (prefers-color-scheme)
   - 모든 페이지 일관된 테마 적용

□ 02. 반응형 네비게이션
   - 모바일에서 햄버거 메뉴
   - 애니메이션으로 부드러운 열림/닫힘
   - 메뉴 외부 클릭 시 자동 닫힘
   - 스크롤 시 네비게이션 축소/확대

□ 03. 고급 검색 필터
   - 가격 범위 슬라이더 (Range Slider)
   - 카테고리 다중 선택
   - 정렬 옵션 (인기순, 가격순, 최신순)
   - 필터 조합에 따른 실시간 결과

□ 04. 무한 스크롤 (Infinite Scroll)
   - 하단 도달 시 자동 로딩
   - Intersection Observer 활용
   - 로딩 스켈레톤 UI
   - "맨 위로" 버튼 추가

□ 05. 이미지 갤러리 & 라이트박스
   - 상품 이미지 클릭 시 확대
   - 좌우 화살표로 이미지 전환
   - 확대/축소 기능 (pinch zoom)
   - ESC 키로 닫기

□ 06. 드래그 앤 드롭 정렬
   - 장바구니 아이템 순서 변경
   - 부드러운 드래그 애니메이션
   - 드롭 영역 하이라이트
   - 순서 변경 저장

□ 07. 실시간 알림 시스템
   - Toast/Snackbar 컴포넌트
   - 자동 사라짐 타이머
   - 성공/에러/경고 타입별 스타일
   - 여러 알림 스택 관리

□ 08. 스켈레톤 로딩 UI
   - 콘텐츠 로딩 중 플레이스홀더
   - 실제 레이아웃과 유사한 구조
   - 반짝이는 애니메이션 효과
   - 점진적 로딩 (Progressive Loading)

□ 09. 커스텀 Select/Dropdown
   - 네이티브 select 대체
   - 검색 기능 포함
   - 키보드 네비게이션 (화살표 키)
   - 접근성 (ARIA) 지원

□ 10. Tooltip & Popover
   - 호버 시 정보 표시
   - 위치 자동 조정 (화면 벗어나지 않게)
   - 클릭/호버 트리거 선택
   - 애니메이션 효과


2. 상태 관리 & 데이터 챌린지 (5개)
================================================================

□ 11. 낙관적 업데이트 (Optimistic UI)
   - 좋아요 버튼 즉시 반응
   - 서버 응답 실패 시 롤백
   - 로딩 상태 없이 부드러운 UX
   - Vue Query의 onMutate 활용

□ 12. 오프라인 지원
   - Service Worker 등록
   - 오프라인 감지 및 알림
   - 로컬 캐시 활용
   - 온라인 복귀 시 동기화

□ 13. 전역 상태 최적화
   - Pinia 모듈 분리 (user, cart, product)
   - 컴포지션 스토어 패턴
   - Persist Plugin으로 localStorage 자동 저장
   - DevTools로 상태 디버깅

□ 14. 실시간 데이터 동기화
   - WebSocket 연동 (재고 수량)
   - Server-Sent Events (SSE)
   - 여러 탭 간 동기화
   - Broadcast Channel API 활용

□ 15. 고급 캐싱 전략
   - Vue Query의 staleTime/cacheTime 최적화
   - 페이지별 캐시 전략 다르게
   - 수동 캐시 무효화
   - Prefetching으로 미리 로딩


3. 폼 & 유효성 검사 챌린지 (5개)
================================================================

□ 16. 다단계 폼 (Multi-step Form)
   - 회원가입 3단계로 분리
   - 진행 상황 표시 (Progress Bar)
   - 이전/다음 버튼
   - 각 단계별 유효성 검사

□ 17. 실시간 유효성 검사
   - 입력 중 즉시 피드백
   - debounce로 성능 최적화
   - 서버 중복 체크 (이메일, 닉네임)
   - 비밀번호 강도 표시

□ 18. 파일 업로드
   - 드래그 앤 드롭 업로드
   - 이미지 미리보기
   - 진행률 표시
   - 용량/형식 제한 검사

□ 19. 자동 완성 (Autocomplete)
   - 검색어 입력 시 추천
   - API 호출 debounce
   - 키보드로 선택 (화살표, Enter)
   - 최근 검색어 저장

□ 20. 동적 폼 필드
   - 조건부 필드 표시/숨김
   - 배열 필드 추가/삭제
   - 의존성 있는 필드 (국가 선택 → 도시 목록)
   - 폼 값 변경 감지 및 자동 저장


4. 성능 최적화 챌린지 (5개)
================================================================

□ 21. 가상 스크롤 (Virtual Scrolling)
   - 수천 개 아이템도 부드럽게
   - 화면에 보이는 것만 렌더링
   - 동적 높이 지원
   - 라이브러리 없이 직접 구현

□ 22. 이미지 최적화
   - Lazy Loading (뷰포트 진입 시 로드)
   - WebP 포맷 지원
   - Blur placeholder (LQIP)
   - Responsive images (srcset)

□ 23. 코드 스플리팅
   - 라우트별 chunk 분리
   - 동적 import로 필요 시 로드
   - Webpack Bundle Analyzer로 분석
   - 번들 크기 50% 이상 줄이기

□ 24. Debounce & Throttle
   - 검색 입력 debounce
   - 스크롤 이벤트 throttle
   - 커스텀 composable 작성
   - 성능 개선 전후 측정

□ 25. Lighthouse 점수 90점 이상
   - Performance 최적화
   - Accessibility 개선
   - SEO 메타 태그
   - PWA 체크리스트


5. 고급 기능 챌린지 (5개)
================================================================

□ 26. i18n 다국어 지원
   - 한국어/영어 전환
   - URL 기반 언어 감지 (/ko, /en)
   - 숫자/날짜 포맷 지역화
   - 번역 파일 구조화

□ 27. 테스트 작성
   - Vitest로 단위 테스트
   - 컴포넌트 테스트 (Testing Library)
   - E2E 테스트 (Playwright)
   - 커버리지 80% 이상

□ 28. 에러 바운더리 & 로깅
   - 전역 에러 핸들러
   - 에러 페이지 (404, 500)
   - Sentry 연동 (에러 추적)
   - 개발/프로덕션 로그 분리

□ 29. PWA 변환
   - Service Worker 등록
   - 오프라인 페이지
   - 앱 설치 프롬프트
   - 푸시 알림 구현

□ 30. 실시간 협업 기능
   - 여러 사용자가 동시에 장바구니 편집
   - 실시간 재고 수량 업데이트
   - Conflict Resolution
   - WebSocket 또는 Firebase 활용


================================================================
난이도별 추천 순서
================================================================

[초급 → 중급]
  1단계: 07, 08, 10 (알림, 스켈레톤, Tooltip)
  2단계: 01, 02, 17 (다크모드, 네비게이션, 유효성)
  3단계: 03, 04, 16 (필터, 무한스크롤, 다단계폼)

[중급 → 고급]
  4단계: 11, 13, 22 (낙관적 UI, 상태관리, 이미지)
  5단계: 06, 18, 21 (드래그앤드롭, 파일업로드, 가상스크롤)
  6단계: 05, 09, 15 (라이트박스, 커스텀 Select, 캐싱)

[고급]
  7단계: 14, 26, 28 (실시간 동기화, i18n, 에러처리)
  8단계: 12, 25, 27 (오프라인, Lighthouse, 테스트)
  9단계: 29, 30 (PWA, 실시간 협업)


================================================================
각 챌린지 예상 소요 시간
================================================================

짧음 (1-3시간)
  - 07, 08, 10, 17, 24

보통 (3-6시간)
  - 01, 02, 03, 04, 13, 16, 22, 23

긴편 (6-12시간)
  - 05, 06, 09, 11, 15, 18, 19, 21, 26, 28

매우 긴편 (12시간+)
  - 12, 14, 20, 25, 27, 29, 30


================================================================
추천 학습 전략
================================================================

[1주차] UI 기초 다지기
  - 챌린지 01, 02, 07, 08
  - 다크모드 + 네비게이션 + 알림 + 스켈레톤

[2주차] 인터랙션 강화
  - 챌린지 03, 04, 10, 17
  - 필터 + 무한스크롤 + Tooltip + 유효성

[3주차] 상태관리 & 폼
  - 챌린지 11, 13, 16, 18
  - 낙관적 UI + Pinia + 다단계폼 + 업로드

[4주차] 성능 최적화
  - 챌린지 21, 22, 23, 24, 25
  - 가상스크롤 + 이미지 + 코드분할 + Lighthouse

[5주차+] 고급 기능
  - 챌린지 26, 27, 28, 29, 30
  - i18n + 테스트 + 에러처리 + PWA + 실시간


================================================================
실전 팁
================================================================

1. 한 번에 하나씩
   - 여러 개 동시에 X
   - 완성 후 다음 챌린지

2. 작은 단위로 커밋
   - 기능별로 git commit
   - 롤백 쉽게

3. 리팩토링 필수
   - 일단 작동하게 만들기
   - 그 다음 개선

4. 문서화
   - README에 구현 내용 기록
   - 어려웠던 점, 배운 점 정리

5. 성능 측정
   - 구현 전후 비교
   - Chrome DevTools 활용


================================================================
작성일: 2025-10-22
================================================================
